package com.espressif.iot.db.greenrobot.daos;

import com.espressif.iot.db.greenrobot.daos.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.espressif.iot.object.db.IGroupCloudDeviceDB;

// KEEP INCLUDES END
/**
 * Entity mapped to table GROUP_CLOUD_DEVICE_DB.
 */
public class GroupCloudDeviceDB implements IGroupCloudDeviceDB {

    private Long id;
    private long groupId;
    /** Not-null value. */
    private String bssid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GroupCloudDeviceDBDao myDao;

    private GroupDB groupDB;
    private Long groupDB__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GroupCloudDeviceDB() {
    }

    public GroupCloudDeviceDB(Long id) {
        this.id = id;
    }

    public GroupCloudDeviceDB(Long id, long groupId, String bssid) {
        this.id = id;
        this.groupId = groupId;
        this.bssid = bssid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGroupCloudDeviceDBDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getGroupId() {
        return groupId;
    }

    public void setGroupId(long groupId) {
        this.groupId = groupId;
    }

    /** Not-null value. */
    public String getBssid() {
        return bssid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBssid(String bssid) {
        this.bssid = bssid;
    }

    /** To-one relationship, resolved on first access. */
    public GroupDB getGroupDB() {
        long __key = this.groupId;
        if (groupDB__resolvedKey == null || !groupDB__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupDBDao targetDao = daoSession.getGroupDBDao();
            GroupDB groupDBNew = targetDao.load(__key);
            synchronized (this) {
                groupDB = groupDBNew;
                groupDB__resolvedKey = __key;
            }
        }
        return groupDB;
    }

    public void setGroupDB(GroupDB groupDB) {
        if (groupDB == null) {
            throw new DaoException("To-one property 'groupId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.groupDB = groupDB;
            groupId = groupDB.getId();
            groupDB__resolvedKey = groupId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
