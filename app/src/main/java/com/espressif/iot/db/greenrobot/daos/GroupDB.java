package com.espressif.iot.db.greenrobot.daos;

import java.util.List;
import com.espressif.iot.db.greenrobot.daos.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.espressif.iot.object.db.IGroupDB;

// KEEP INCLUDES END
/**
 * Entity mapped to table GROUP_DB.
 */
public class GroupDB implements IGroupDB {

    private long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String userKey;
    private int state;
    private int type;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GroupDBDao myDao;

    private List<GroupLocalDeviceDB> localDevices;
    private List<GroupCloudDeviceDB> cloudDevices;
    private List<GroupRemoveDeviceDB> removeDevices;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GroupDB() {
    }

    public GroupDB(long id) {
        this.id = id;
    }

    public GroupDB(long id, String name, String userKey, int state, int type) {
        this.id = id;
        this.name = name;
        this.userKey = userKey;
        this.state = state;
        this.type = type;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGroupDBDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getUserKey() {
        return userKey;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUserKey(String userKey) {
        this.userKey = userKey;
    }

    public int getState() {
        return state;
    }

    public void setState(int state) {
        this.state = state;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted,
     * make changes to the target entity.
     */
    public List<GroupLocalDeviceDB> getLocalDevices() {
        if (localDevices == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupLocalDeviceDBDao targetDao = daoSession.getGroupLocalDeviceDBDao();
            List<GroupLocalDeviceDB> localDevicesNew = targetDao._queryGroupDB_LocalDevices(id);
            synchronized (this) {
                if (localDevices == null) {
                    localDevices = localDevicesNew;
                }
            }
        }
        return localDevices;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLocalDevices() {
        localDevices = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted,
     * make changes to the target entity.
     */
    public List<GroupCloudDeviceDB> getCloudDevices() {
        if (cloudDevices == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupCloudDeviceDBDao targetDao = daoSession.getGroupCloudDeviceDBDao();
            List<GroupCloudDeviceDB> cloudDevicesNew = targetDao._queryGroupDB_CloudDevices(id);
            synchronized (this) {
                if (cloudDevices == null) {
                    cloudDevices = cloudDevicesNew;
                }
            }
        }
        return cloudDevices;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCloudDevices() {
        cloudDevices = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted,
     * make changes to the target entity.
     */
    public List<GroupRemoveDeviceDB> getRemoveDevices() {
        if (removeDevices == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupRemoveDeviceDBDao targetDao = daoSession.getGroupRemoveDeviceDBDao();
            List<GroupRemoveDeviceDB> removeDevicesNew = targetDao._queryGroupDB_RemoveDevices(id);
            synchronized (this) {
                if (removeDevices == null) {
                    removeDevices = removeDevicesNew;
                }
            }
        }
        return removeDevices;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRemoveDevices() {
        removeDevices = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
